SYNTAX


set(key, value) – Adds a key-value pair.
get(key) – Retrieves the value associated with the given key.
has(key) – Checks if the key exists in the map.
delete(key) – Removes the key-value pair for the given key.
clear() – Clears all key-value pairs in the map.
size – The number of key-value pairs in the map.

// Create a new HashMap (using an object in JavaScript)
let myHashMap = new Map();

// Adding key-value pairs
myHashMap.set("key1", "value1");
myHashMap.set("key2", "value2");
myHashMap.set("key3", "value3");

// Accessing values by key
console.log(myHashMap.get("key1"));  // Output: value1
console.log(myHashMap.get("key2"));  // Output: value2

// Checking if a key exists
console.log(myHashMap.has("key1"));  // Output: true
console.log(myHashMap.has("key4"));  // Output: false

// Removing a key-value pair
myHashMap.delete("key3");

// Checking the size of the HashMap
console.log(myHashMap.size);  // Output: 2

// Iterating through the HashMap
myHashMap.forEach((value, key) => {
  console.log(key + " => " + value);
});

// Clearing all entries in the HashMap
myHashMap.clear();

--

let myHashMap = new Map();
myHashMap.set("name", "John");
myHashMap.set("age", 30);

console.log(myHashMap.get("name"));  // Output: John
console.log(myHashMap.get("age")); 


!! code to give error if we try to access an out-of-bounds index:

if (index < 0 || index >= buckets.length) {
  throw new Error("Trying to access index out of bounds");
}

---
Syntax of Classes

// Define a class
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  greet() {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
  }
}

// Create an object (instance) of the class
const person1 = new Person("Alice", 25);

// Call a method on the object
person1.greet(); // Output: Hello, my name is Alice and I am 25 years old.


----

FURTHER 

class HashTable {
  constructor(size = 10) {
    this.buckets = new Array(size);
  }

We use this.buckets = new Array(size); to decide the size of index/table.

We use remainder of the modulo to decide the place of the index of the array to place key-object values.
